# BACKUP

volumes:
  # -- auth
  server_auth_authentik_postgresql_dumps:
    external: true
  server_auth_authentik_redis_dumps:
    external: true
  server_auth_authentik_server_media:
    external: true
  server_auth_authentik_server_templates:
    external: true
  server_auth_authentik_server_certs:
    external: true
  # -- backup
  server_backup_docker_volume_backup:
    external: true
  server_backup_duplicati_config:
    external: true
  # -- docker
  server_docker_portainer_data:
    external: true
  # -- downloader
  # -- htpc
  # -- metrics
  # -- traefik

networks:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true

services:
  # ----------------------------------------
  # DOCKER VOLUME BACKUP
  # Backup Docker volumes locally or to compatible storage
  # documentation: https://offen.github.io/docker-volume-backup/
  # ----------------------------------------
  docker-volume-backup:
    image: offen/docker-volume-backup:latest
    container_name: docker-volume-backup
    user: root
    environment:
      - GPG_PASSPHRASE=${GPG_PASSPHRASE}
      - NOTIFICATION_URLS=${BACKUP_BACKUP_NOTIFICATION_URLS}
      - NOTIFICATION_LEVEL=error
      - DOCKER_HOST=tcp://socket-proxy:${SOCKET_PROXY_PORT}
    networks:
      - socket_proxy
    volumes:
      # -- backup config 
      - ./backup-volume-docker:/etc/dockervolumebackup/conf.d
      # -- services volumes to backup (sources)
      # auth
      - server_auth_authentik_postgresql_dumps:/backup/authentik-postgresql-data-backup:ro
      - server_auth_authentik_redis_dumps:/backup/authentik-redis-data-backup:ro
      - server_auth_authentik_server_media:/backup/authentik-server-media-data-backup:ro
      - server_auth_authentik_server_templates:/backup/authentik-server-templates-data-backup:ro
      - server_auth_authentik_server_certs:/backup/authentik-server-certs-data-backup:ro
      # backup
      - server_backup_docker_volume_backup:/backup/duplicati-data-backup:ro
      # docker
      - server_docker_portainer_data:/backup/portainer-data-backup:ro
      # -- path to local backup (destination)
      - ${LOCAL_BACKUPS_PATH}/docker-volume-backup:/archive
    restart: unless-stopped
    depends_on:
      socket-proxy:
        condition: service_healthy


  # ----------------------------------------
  # DUPLICATI
  # Remote backup solution
  # ----------------------------------------
  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - TZ=${TZ}
      - PUID=1010
      - PGID=1010
      - SETTINGS_ENCRYPTION_KEY=${DUPLICATI_SETTINGS_ENCRYPTION_KEY}
      - CLI_ARGS=${DUPLICATI_CLI_ARGS}
      - DUPLICATI__WEBSERVICE_PASSWORD=${DUPLICATI__WEBSERVICE_PASSWORD}
    networks:
      - traefik_proxy
    ports:
      - ${DUPLICATI_PORT}:8200
    volumes:
      # -- duplicati config 
      - server_backup_duplicati_config:/config
      # -- sources (project dir to save env and LOCAL_BACKUPS_PATH to duplicate docker volumes backups in cloud)
      - ../:/source/home
      - ${LOCAL_BACKUPS_PATH}/docker-volume-backup:/source/docker-volume-backup
      # -- local destination (just in case)
      - ${LOCAL_BACKUPS_PATH}/duplicati:/backups
    labels:
      traefik.enable: true
      traefik.http.routers.duplicati.rule: Host(`duplicati.${DOMAIN}`)
      traefik.http.routers.duplicati.entrypoints: websecure
      traefik.http.routers.duplicati.tls.certresolver: myresolver
      traefik.http.routers.duplicati.middlewares: authentik-auth
      docker-volume-backup.stop-during-backup: duplicati-service
    restart: unless-stopped

