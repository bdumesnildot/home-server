# ANTHENTIK AUTH SERVICES

volumes:
  server_auth_authentik_postgresql:
    external: true
  server_auth_authentik_postgresql_dumps:
    external: true
  server_auth_authentik_redis:
    external: true
  server_auth_authentik_redis_dumps:
    external: true
  server_auth_authentik_server_media:
    external: true
  server_auth_authentik_server_templates:
    external: true
  server_auth_authentik_server_certs:
    external: true

networks:
  authentik_server:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true

services:
  # ----------------------
  # POSTGRES
  # ----------------------
  authentik_postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: authentik-postgresql
    environment:
      TZ: ${TZ}
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
    networks:
      - authentik_server
    ports:
      - ${AUTHENTIK_POSTGRESQL_PORT}:5432
    volumes:
      - server_auth_authentik_postgresql:/var/lib/postgresql/data
      - server_auth_authentik_postgresql_dumps:/tmp/dumps
      - ../scripts/postgres-backup.sh:/postgres-backup.sh:ro
    labels:
      docker-volume-backup.exec-label: authentik-postgresql
      docker-volume-backup.archive-pre: sh -c '/postgres-backup.sh'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    restart: unless-stopped

  # ----------------------
  # REDIS
  # ----------------------
  authentik_redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    networks:
      - authentik_server
    ports:
      - ${AUTHENTIK_REDIS_PORT}:6379
    volumes:
      - server_auth_authentik_redis:/data
      - server_auth_authentik_redis_dumps:/tmp/dumps
    command: 
      - --loglevel warning
      - --save 60 1 # Save every 1 minutes if at least 1 write occurs
      - --dir /data
      - --dbfilename dump.rdb
    labels:
      docker-volume-backup.exec-label: authentik-redis
      docker-volume-backup.archive-pre: sh -c 'redis-cli SAVE && [ -f /data/dump.rdb ] && cp /data/dump.rdb /tmp/dumps/'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    restart: unless-stopped


  # ----------------------
  # AUTHENTIK SERVER
  # ----------------------
  authentik_server:
    image: ghcr.io/goauthentik/server:2025.2.0
    container_name: authentik-server
    user: 1010:1010
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}

      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING__ENABLED}

      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL__PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL__USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL__PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL__USE_TLS}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL__USE_SSL}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL__TIMEOUT}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM}
    networks:
      - authentik_server
      - traefik_proxy
    ports:
      - ${AUTHENTIK_SERVER_PORT}:9000
    volumes:
      - server_auth_authentik_server_media:/media
      - server_auth_authentik_server_templates:/templates
    command: server
    labels:
      # -- traefik
      traefik.enable: true
      traefik.docker.network: traefik_proxy

      traefik.http.routers.authentik.service: authentik
      traefik.http.routers.authentik.rule: Host(`auth.${DOMAIN}`)
      traefik.http.routers.authentik.entrypoints: websecure
      traefik.http.routers.authentik.tls.certresolver: myresolver
      traefik.http.services.authentik.loadbalancer.server.port: 9000

      traefik.http.routers.authentik-output.service: authentik-output
      traefik.http.routers.authentik-output.rule: HostRegexp(`{subdomain:[a-z0-9-]+}.${DOMAIN}`) && PathPrefix(`/outpost.goauthentik.io`)
      traefik.http.routers.authentik-output.entrypoints: websecure
      traefik.http.routers.authentik-output.tls.certresolver: myresolver
      traefik.http.services.authentik-output.loadbalancer.server.port: 9000
      # -- backup
      docker-volume-backup.stop-during-backup: authentik-server-service
    depends_on:
      authentik_postgresql:
        condition: service_healthy
      authentik_redis:
        condition: service_healthy
    restart: unless-stopped


  # ----------------------
  # AUTHENTIK WORKER
  # ----------------------
  authentik_worker:
    image: ghcr.io/goauthentik/server:2025.2.0
    container_name: authentik-worker
    user: root
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}

      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING__ENABLED}

      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL__PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL__USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL__PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL__USE_TLS}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL__USE_SSL}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL__TIMEOUT}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM}
    networks:
      - authentik_server
      - socket_proxy
    volumes:
      - server_auth_authentik_server_certs:/certs
      - server_auth_authentik_server_media:/media
      - server_auth_authentik_server_templates:/templates
    command: worker
    restart: unless-stopped
    depends_on:
      authentik_postgresql:
        condition: service_healthy
      authentik_redis:
        condition: service_healthy
      socket-proxy:
        condition: service_healthy
