# METRICS

volumes:
  server_metrics_grafana_data:
    external: true
  server_metrics_grafana_provisioning:
    external: true
  server_metrics_prometheus_data:
    external: true

networks:
  traefik_proxy:
    external: true
  metrics:
    external: true

services:
  # ----------------------------------------
  # GRAFANA
  # Composable observalbility plateform
  # ----------------------------------------
  grafana:
    image: grafana/grafana
    container_name: grafana
    user: ${PUID}:${PGID}
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_SECURITY_ADMIN_PASSWORD}
    networks:
      - traefik_proxy
      - metrics
    ports:
      - ${GRAFANA_PORT}:3000
    volumes:
      - server_metrics_grafana_data:/var/lib/grafana
      - server_metrics_grafana_provisioning:/etc/grafana/provisioning
      - /etc/localtime:/etc/localtime:ro
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.http.routers.grafana.rule: Host(`grafana.${DOMAIN}`)
      traefik.http.services.grafana.loadbalancer.server.port: 3000
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.tls.certresolver: myresolver
      traefik.http.routers.grafana.middlewares: authentik-auth
    restart: unless-stopped


  # ----------------------------------------
  # PROMETHEUS
  # Monitoring system & time series database
  # ----------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: root
    networks:
      - traefik_proxy
      - metrics
    ports:
      - ${PROMETHEUS_PORT}:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - server_metrics_prometheus_data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    # labels:
      # traefik.enable: true
      # traefik.docker.network: traefik_proxy
      # traefik.http.routers.prometheus.rule: Host(`prometheus.${DOMAIN}`)
      # traefik.http.routers.prometheus.entrypoints: websecure
      # traefik.http.routers.prometheus.tls.certresolver: myresolver
      # traefik.http.routers.prometheus.middlewares: authentik-auth
    restart: unless-stopped


  # ----------------------------------------
  # NODE EXPORTER
  # Prometheus exporter for hardware and OS metrics
  # ----------------------------------------  
  prometheus-node-exporter:
    image: prom/node-exporter:latest
    container_name: prometheus-node-exporter
    user: ${PUID}:${PGID}
    networks:
      - metrics
    ports:
      - ${PROMETHEUS_NODE_EXPORTER_PORT}:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/localtime:/etc/localtime:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
