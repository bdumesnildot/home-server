# REVERSE PROXY

volumes:
  server_traefik_letsencrypt:
    external: true

networks:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true
  metrics:
    external: true

services:
  # ----------------------------------------
  # TRAEFIK
  # Reverse Proxy + SSL Support
  # ----------------------------------------
  traefik:
    image: traefik:v3.3.3
    container_name: traefik
    user: 1010:1010
    environment:
      - DOMAIN=${DOMAIN}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    networks:
      - traefik_proxy
      - socket_proxy
      - metrics
    ports:
      - 80:80
      - 443:443
      - ${TRAEFIK_DASHBOARD_PORT}:8080
      - ${TRAEFIK_METRICS_PORT}:8082
    volumes:
      # - ../docker/volumes/traefik/letsencrypt:/letsencrypt
      - server_traefik_letsencrypt:/letsencrypt
    command:
      - --api.insecure=true
      - --log.level=DEBUG
      ## -- providers
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=tcp://socket-proxy:${SOCKET_PROXY_PORT}
      ## -- entrypoints
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      ## -- tls certificates 
      - --certificatesresolvers.myresolver.acme.email=${EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare
      ## -- metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --entryPoints.metrics.address=:8082
      - --metrics.prometheus.entryPoint=metrics
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addrouterslabels=true
      - --metrics.prometheus.addServicesLabels=true
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy

      ## -- Router dashboard
      traefik.http.routers.traefik-dashboard.service: api@internal
      traefik.http.routers.traefik-dashboard.rule: Host(`traefik.${DOMAIN}`)
      traefik.http.routers.traefik-dashboard.entrypoints: websecure
      traefik.http.routers.traefik-dashboard.tls.certresolver: myresolver
      traefik.http.routers.traefik-dashboard.middlewares: authentik-auth

      ## -- Middelware "ratelimit"
      # traefik.http.middlewares.ratelimit.ratelimit.average: 100
      # traefik.http.middlewares.ratelimit.ratelimit.period: 1m

      ## -- Middelware "authentik-auth"
      traefik.http.middlewares.authentik-auth.forwardAuth.address: http://authentik_server:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik-auth.forwardAuth.trustForwardHeader: true
      traefik.http.middlewares.authentik-auth.forwardauth.authResponseHeaders: X-authentik-groups X-authentik-entitlements X-authentik-email X-authentik-name X-authentik-uid X-authentik-jwt X-authentik-meta-jwks X-authentik-meta-outpost X-authentik-meta-provider X-authentik-meta-app X-authentik-meta-version 
    depends_on:
      socket-proxy:
        condition: service_healthy
    restart: always


  whoami:
    image: traefik/whoami
    container_name: whoami
    networks:
      - traefik_proxy
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.${DOMAIN}`)
      traefik.http.routers.whoami.entrypoints: websecure
      traefik.http.routers.whoami.tls.certresolver: myresolver
      traefik.http.routers.whoami.middlewares: authentik-auth
